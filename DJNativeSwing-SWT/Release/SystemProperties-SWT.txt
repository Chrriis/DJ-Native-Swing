Here are the system properties recognized by the DJ Native Swing SWT-based
implementation.

Note that most of these properties need to be defined before the classes that
are using them get loaded.

--------------------------------------------------------------------------------

* nativeswing.interface.port
  = <integer> (default: -1)
  Force the port to use to communicate with the spawned VM.

* nativeswing.interface.streamResetThreshold
  = <integer> (default: 500000)
  Set the number of bytes that need to be exchanged to trigger a reset of the
  Object communication stream.

* nativeswing.interface.syncMessages
  = true/false (default: false)
  Set whether all asynchronous messages should be sent synchronously.

* nativeswing.interface.debug.printMessages
  = true/false (default: false)
  Set whether to print the messages that are exchanged.

* nativeswing.interface.inProcess
  = true/false (default: platform-dependant)
  Set whether the interface should be in-process or out-process. Platforms which
  use out-process may be switched to in-process, but this may affect stability.
  Change this setting only when you need to debug sequences in a single VM.

* nativeswing.interface.outProcess.communication
  = sockets/processio (default: sockets)
  Set whether the communication interface should use sockets or the process IO.

* nativeswing.interface.outProcess.connectionTimeout
  = <integer> (default: 10000)
  On slow systems, connection to the other process may not complete in time, in
  which case it might be desirable to increase the timeout.

* nativeswing.interface.inProcess.printNonSerializableMessages
  = true/false (default: false)
  When in-process, set whether messages should be artificially serialized to
  check whether they would be compatible with the out-process mode.

--------------------------------------------------------------------------------

* nativeswing.peervm.create
  = true/false (default: true)
  Set whether the peer VM should be created. Setting it to false and forcing the
  port allows to connect to a separately launched peer VM.

* nativeswing.peervm.keepAlive
  = true/false (default: false)
  Set whether the peer VM should die after a timeout. This is useful when
  launching the peer VM separately.
  
* nativeswing.peervm.forceProxyClassLoader
  = true/false (default: false)
  Force the use of the proxy class loader. This specific class loader is
  automatically used in the peer VM when some resources cannot be located when
  spawning the VM.

* nativeswing.peervm.debug.printStartMessage
  = true/false (default: false)
  Set whether a message should be printed when the peer VM is launched, in order
  to check that the peer VM could be created.
 
* nativeswing.peervm.debug.printStopMessage
  = true/false (default: false)<br/>
  Set whether a message should be printed when the peer VM stops, in order to
  know that it stopped on purpose and not because of a crash.

* nativeswing.peervm.debug.printCommandLine
  = true/false (default: false)
  Set whether the command line that is used to spawn the peer VM should be
  printed.

--------------------------------------------------------------------------------

* nativeswing.components.debug.printFailedMessages
  = true/false (default: false)
  Set whether the messages that did not reach the native component should be
  printed.

* nativeswing.components.debug.printCreation
  = true/false (default: false)
  Set whether the creation of a native component should be printed.

* nativeswing.components.debug.printDisposal
  = true/false (default: false)
  Set whether the disposal of a native component should be printed.

* nativeswing.components.swallowRuntimeExceptions
  = true/false (default: false)
  Set whether synchronous component methods should swallow runtime
  exceptions and return dummy results. This is a sort of paranoid mode since
  such exceptions are not supposed to happen. Moreover, there is no guarantee
  that user code can recover from all dummy results.

--------------------------------------------------------------------------------

* nativeswing.webbrowser.runtime
  = xulrunner/webkit/edge (default: none)
  Set the runtime of the web browser.

* nativeswing.webbrowser.xulrunner.home
  = <path to XULRunner>
  Set which XULRunner installation is used. This property is taken into account
  when using the XULRunner runtime.

--------------------------------------------------------------------------------

* nativeswing.htmleditor.getHTMLContent.timeout
  = <integer> (default: 1500)<br/>
  Under heavy load, getHTLMContent may not complete in time, so for such systems
  it is desirable to increase the timeout.

--------------------------------------------------------------------------------

* nativeswing.vlcplayer.fixPlaylistAutoPlayNext
  = true/false (default: true)
  VLC seems to have a bug: it does not automatically play the next queued item.
  The fix that was added can be deactivated with this system property.

--------------------------------------------------------------------------------

* nativeswing.swt.device.debug
  = true/false (default: false)
  Set whether the SWT Device debugging is active. This property can be useful
  because it outputs the web browser runtime effectively detected for the OS.
